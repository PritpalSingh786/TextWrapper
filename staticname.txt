
== check_palindrome_str.py ==
strr = 'wow'
concate = ""

for i in range(len(strr) - 1, -1, -1):
    print(strr[i])
    concate += strr[i]

if concate == strr:
    print("Palindrome")
else:
    print("Not palindrome")



== check_Armstrong.py ==
import time

print("Execution Time:")
start_time = time.time()

number = 153
temp_store = number

# Find number of digits
length = len(str(temp_store))

result = 0

while number > 0:
    modulus = number % 10
    result += pow(modulus, length)
    number //= 10  # Integer division

# Check Armstrong condition
if result == temp_store:
    print(result, "is an Armstrong number")
else:
    print(temp_store, "is not an Armstrong number")

end_time = time.time()
print(f"Execution Time: {round((end_time - start_time) * 1000, 4)} ms")



== pattern8.py ==
strr = ""
for row in range(5, 0, -1):
    for col in range(1, row + 1):
        strr += str(row) + " "
    strr += "\n"

print(strr)

"""
5 5 5 5 5 
4 4 4 4 
3 3 3 
2 2 
1 
"""



== pattern9.py ==
strr = ""
initial_value = 15
for row in range(5, 0, -1):
    for col in range(1, row + 1):
        strr += str(initial_value) + " "
        initial_value -= 1
    strr += "\n"

print(strr)

"""
15 14 13 12 11 
10 9 8 7 
6 5 4 
3 2 
1 
"""



== swapping.py ==
a = 20
b = 10

# Swap without using a temp variable
a = a + b
b = a - b
a = a - b

print(b)
print(a)



== pattern2.py ==
strr = ''
for i in range(4):
    for j in range(i + 1):
        strr += "* "
    strr += "\n"

print(strr)

"""
* 
* * 
* * * 
* * * * 
"""



== count_occurrence.py ==
count = {}
arr = [3, 3, 2, 2, 5, 5]

for i in range(len(arr)):
    if arr[i] not in count:
        count[arr[i]] = 1
    else:
        count[arr[i]] += 1

print(count)



== pattern13.py ==
strr = ""
for row in range(1, 6):
    for col in range(row, 5):
        strr += " "
    for col in range(1, 2 * row):
        strr += "*"
    strr += "\n"

print(strr)

'''

    *
   ***
  *****
 *******
*********

'''


== convert_key_into_value.py ==
dictt = {1:'a', 2:'b'}
dictt1 = {}

for k, v in dictt.items():
    dictt1.setdefault(v, []).append(k)
print(dictt1)


== remove_duplicates_in_array.py ==
# Initial list with duplicate values
data_list = [1, 1, 1, 1, 2, 2, 2, 1, 2, 3, 1, 11, 12, 100, 1, 5, 7, 7, 112, 112, 123]

while True:
    current_length = len(data_list)
    print(current_length)  # Debugging: current length

    for i in range(len(data_list)):
        item = data_list[i]

        try:
            first_index = data_list.index(item)
            next_index = data_list.index(item, first_index + 1)

            # If found again, remove the duplicate
            data_list.pop(next_index)
            break  # Restart the loop after removal
        except ValueError:
            pass  # No duplicate found for this item

    if len(data_list) == current_length:
        break  # No elements removed, exit loop

# Final list with one occurrence of each element
print("Deduplicated List:", data_list)

# Manually create a unique list (like JS nested loop)
unique_list = []

for i in range(len(data_list)):
    is_duplicate = False
    for j in range(len(unique_list)):
        if data_list[i] == unique_list[j]:
            is_duplicate = True
            break
    if not is_duplicate:
        unique_list.append(data_list[i])

print("Unique List:", unique_list)



== check_prime_number.py ==
n = 3
is_prime = True

if n < 2:
    is_prime = False
else:
    for i in range(2, n):
        if n % i == 0:
            is_prime = False
            break

if is_prime:
    print("Prime")
else:
    print("Not prime")



== bubblesort.py ==
arr = [1, 6, 8, 5]
for i in range(len(arr)):
    for j in range(len(arr) - 1):  # avoid IndexError at j+1
        if arr[j] > arr[j + 1]:
            arr[j], arr[j + 1] = arr[j + 1], arr[j]

print(arr)



== pattern11.py ==
strr = ""
for i in range(1, 6):
    for j in range(1, i + 1):
        if (i + j) % 2 == 0:
            strr += "1 "
        else:
            strr += "0 "
    strr += "\n"

print(strr)

"""
1 
0 1 
1 0 1 
0 1 0 1 
1 0 1 0 1 
"""



== find_prime_in_array.py ==
arr = [0,1,2,3]
isFind = False

for i in arr:
    if(i<2):
        continue
    else:
       isPrime = True
       for j in range(2,i):
          if i%j==0:
            isPrime = False
            break
    if(isPrime):
       print(i)
       isFind = True
if(not isFind):
   print('not found')


== pattern5.py ==
strr = ''
for i in range(6, 0, -1):
    for j in range(1, i):
        strr += str(j) + " "
    strr += "\n"

print(strr)

"""
1 2 3 4 5 
1 2 3 4 
1 2 3 
1 2 
1 
"""



== pattern1.py ==
strr = ''
for i in range(4):
    for j in range(5):
        strr += "* "
    strr += "\n"

print(strr)

"""
* * * * * 
* * * * * 
* * * * * 
* * * * * 
"""



== find_missing_values.py ==
arr = [1, 10, 7]

min_value = arr[0]
max_value = arr[0]

# Find min and max
for i in range(1, len(arr)):
    if arr[i] > max_value:
        max_value = arr[i]
    if arr[i] < min_value:
        min_value = arr[i]
    print(min_value)

print("Max:", max_value)
print("Min:", min_value)

# Find and print missing numbers between min and max
for j in range(min_value, max_value + 1):
    found = False
    for i in range(len(arr)):
        if arr[i] == j:
            found = True
            break
    if not found:
        print("Missing:", j)



== abcABc.py ==
# Lowercase letters a-z
for i in range(97, 123):
    print(chr(i))

# Uppercase letters A-Z
for j in range(65, 91):
    print(chr(j))



== cardmask.py ==
card_number = "4111111111111111"
length_of_card_number = len(card_number)

# Get first and last characters
first_char = card_number[0]
last_char = card_number[length_of_card_number - 1]

# Slice the middle portion and replace all characters with 'X'
remove_first_and_last = card_number[1:-1]
masked = ''.join('X' for _ in remove_first_and_last)

# Concatenate the final masked card
final_masked_card = first_char + masked + last_char
print("Masked Card:\n", final_masked_card)

# Without using built-in methods
mask = ""
for i in range(len(card_number)):
    if i == 0 or i == len(card_number) - 1:
        mask += card_number[i]
    else:
        mask += "X"

print(mask)



== divide_name_into_array.py ==
name1 = "pritpal"
arr = []

for i in range(len(name1), 0, -1):
    str_ = ''
    for j in range(i):
        str_ += name1[j]
    arr.append(str_)

print(arr)



== pattern3.py ==
strr = ''
for i in range(4, 0, -1):
    for j in range(i):
        strr += "* "
    strr += "\n"

print(strr)

"""
* * * * 
* * * 
* * 
* 
"""



== binarySearch.py ==
def binary_search(arr, key):
    arr.sort()  # Sort the array just like JS sort((a, b) => a - b)
    low = 0
    high = len(arr) - 1
    is_found = False

    while low <= high and not is_found:
        mid = (low + high) // 2  # floor division
        if arr[mid] == key:
            is_found = True
        elif arr[mid] < key:
            low = mid + 1
        else:
            high = mid - 1

    if is_found:
        print(f"Key {key} found at index {mid}")
    else:
        print("Key not found")

# Test
arr = [2, 1, 4]
binary_search(arr, 1)



== print_palindrome.py ==
arr = [121, 456]

for i in arr:
    result = 0
    temp = i
    while temp > 0:
        mod = temp % 10
        result = result * 10 + mod
        temp = temp // 10
    if result == i:
        print(i)



== check_palindrome_number.py ==
n = 121
temp = n
result = 0

while n > 0:
    remainder = n % 10
    result = result * 10 + remainder
    n = n // 10  # floor division

if result == temp:
    print("Palindrome")
else:
    print("Not palindrome")



== pattern4.py ==
strr = ''
for i in range(4):
    for j in range(i, 4):
        strr += " "  # add space for left padding
    for j in range(i + 1):
        strr += "*"
    strr += "\n"

print(strr)

"""
    *
   **
  ***
 ****
"""



== pattern6.py ==
strr = ''
for i in range(1, 6):
    for j in range(1, i + 1):
        strr += str(j) + " "
    strr += "\n"

print(strr)

"""
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 
"""



== convert_array_into_nested.py ==
array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
arr1 = []
arr2 = []
chunks = 5

for i in range(len(array)):
    arr1.append(array[i])
    if len(arr1) == chunks:
        arr2.append(arr1)
        arr1 = []

if len(arr1) > 0:
    arr2.append(arr1)

print(arr2)



== input_output.py ==
def main():
    n = int(input("How many numbers you want to enter: "))
    print(f"Please enter {n} numbers")

    arr = []
    for i in range(1, n + 1):
        enter_number = int(input("Please enter number: "))
        arr.append(enter_number)

    print(arr)

if __name__ == "__main__":
    main()



== pattern10.py ==
strr = ""
initial_value = 1
for row in range(1, 6):
    for col in range(1, row + 1):
        strr += str(initial_value) + " "
        initial_value += 1
    strr += "\n"

print(strr)

"""
1 
2 3 
4 5 6 
7 8 9 10 
11 12 13 14 15 
"""



== addition_without_arith.py ==
def add(a, b):
    while b != 0:
        carry = a & b       # carry
        a = a ^ b           # sum without carry
        b = carry << 1      # shift carry
    return a

print(add(5, 3))  # Output: 8

'''
Bitwise AND (&) and XOR (^) Rules
| A | B | A & B | A ^ B |
|---|---|--------|--------|
| 0 | 0 |   0    |   0    |
| 0 | 1 |   0    |   1    |
| 1 | 0 |   0    |   1    |
| 1 | 1 |   1    |   0    |

step1:
carry = a & b = 5 & 3 = 8421 = 0101 & 0011 = 0001 = 1
a = a ^ b = 8421 = 0101 ^ 0011 = 0110 = 6
b = carry << 1 = 0001 << 1 = 0010 = 2

step2:
carry = a & b = 6 & 2 = 8421 = 0110 & 0010 = 0010 = 2
a = a ^ b = 6 ^ 2 = 8421 = 0110 ^ 0010 = 0100 = 4
b = carry << 1 = 0010 << 1 = 0100 = 4

step3:
carry = a & b = 4 & 4 = 8421 = 0100 & 0100 = 0100 = 4
a = a ^ b = 4 ^ 4 = 8421 = 0100 ^ 0100 = 0000 = 0
b = carry << 1 = 0100 << 1 = 1000 = 8

step4:
carry = a & b = 0 & 8 = 8421 = 0000 & 1000 = 0000 = 0
a = a ^ b = 0 ^ 8 = 8421 = 0000 ^ 1000 = 1000 = 8
b = carry << 1 = 0000 << 1 = 0000 = 0

when b == 0 then return a = 8
'''



== pattern7.py ==
strr = ""
for i in range(4):
    for j in range(5):
        if i == 0 or i == 3 or j == 0 or j == 4:
            strr += "*"
        else:
            strr += " "
    strr += "\n"

print(strr)

"""
*****
*   *
*   *
*****
"""



== pattern12.py ==
heart = ''

for i in range(6):
    for j in range(7):
        if (
            (i == 0 and j % 3 != 0) or
            (i == 1 and j % 3 == 0) or
            (i - j == 2) or
            (i + j == 8)
        ):
            heart += '*'
        else:
            heart += ' '
    heart += '\n'

print(heart)

"""
 ** ** 
*  *  *
*     *
 *   * 
  * *  
   * 
"""

for i in range(1, 7):
    for j in range(1, 8):
        if (
            (i == 1 and j % 3 != 0) or     # Top two bumps
            (i == 2 and j % 3 == 1) or     # Edges of bumps
            (i - j == 2) or                # Left diagonal
            (i + j == 10)                  # Right diagonal
        ):
            heart += '*'
        else:
            heart += ' '
    heart += '\n'

print(heart)


== 2_sum.py ==
def two_sum(arr, target):
    for i in range(len(arr)):
        for j in range(i + 1, len(arr)):
            if arr[i] + arr[j] == target:
                return [arr[i], arr[j]]
    return "not found"

print(two_sum([1, 2, 4], 3))



